{
  "swagger": "2.0",
  "basePath": "/v1",
  "info": {
    "title": "Template Registry API",
    "version": "0.2.0",
    "license": {
      "name": "Apache-2.0 License",
      "url": "https://github.com/adobe/adp-template-registry-api?tab=Apache-2.0-1-ov-file"
    }
  },
  "responses": {
    "BadRequest": {
      "description": "A request doesn't meet requirements, contains invalid data, or is missing required parameters.",
      "schema": {
        "$ref": "#/definitions/400"
      },
      "examples": {
        "errors": [
          {
            "code": "missing_required_parameter",
            "message": "The \"XXX\" parameter is not set"
          }
        ]
      }
    },
    "Unauthorized": {
      "description": "A request has not been completed because it lacks valid authentication credentials for the requested resource."
    },
    "Forbidden": {
      "description": "Not enough permissions to access this resource."
    },
    "Conflict": {
      "description": "A resource already exists."
    },
    "HttpMethodNotAllowed": {
      "description": "A target resource doesn't support this method."
    },
    "NotFound": {
      "description": "A requested resource was not found or doesn't exist."
    },
    "InternalServerError": {
      "description": "An error occurred during processing a request."
    },
    "ServiceUnavailable": {
      "description": "A service is temporarily unable to handle a request. Try again later."
    },
    "GatewayTimeout": {
      "description": "The underlying service did not respond on time. Try again later."
    }
  },
  "parameters": {
    "TemplateName": {
      "name": "templateName",
      "in": "path",
      "required": true,
      "description": "The name of the template on npmjs.com",
      "type": "string"
    },
    "TemplateId": {
      "name": "templateId",
      "in": "path",
      "required": true,
      "description": "The id of the template in the UUID format",
      "type": "string"
    },
    "OrgName": {
      "name": "orgName",
      "in": "path",
      "required": true,
      "description": "Organisation name on npmjs.com",
      "type": "string"
    },
    "NamesParam": {
      "name": "names",
      "in": "query",
      "required": false,
      "description": "Filter by template names. A comma-delimited list of template names (npm package names).\n",
      "type": "string"
    },
    "CategoriesParam": {
      "name": "categories",
      "in": "query",
      "required": false,
      "description": "Filter by template categories. A comma-delimited list of template categories.\n",
      "type": "string"
    },
    "ApisParam": {
      "name": "apis",
      "in": "query",
      "required": false,
      "allowEmptyValue": true,
      "description": "Filter by template APIs. A comma-delimited list of template APIs.\n",
      "type": "string"
    },
    "ExtensionsParam": {
      "name": "extensions",
      "in": "query",
      "required": false,
      "allowEmptyValue": true,
      "description": "Filter by template extension points. A comma-delimited list of template extension points.\n",
      "type": "string"
    },
    "EventsParam": {
      "name": "events",
      "in": "query",
      "required": false,
      "allowEmptyValue": true,
      "description": "Filter by template events. It supports \"empty\" (?events=) and \"any\" (?events=*) filters for now.\nThe \"empty\" filter (?events=) returns templates that do not have the \"event\" property set.\nThe \"any\" (?events=*) filter returns templates that do have the \"event\" property set.\n",
      "type": "string"
    },
    "RuntimeParam": {
      "name": "runtime",
      "in": "query",
      "required": false,
      "allowEmptyValue": true,
      "description": "Is Runtime required or not.\n",
      "type": "string",
      "enum": [
        "true",
        "false",
        "*"
      ]
    },
    "StatusesParam": {
      "name": "statuses",
      "in": "query",
      "required": false,
      "description": "Filter by template statuses.\n",
      "type": "string"
    },
    "AdobeRecommendedParam": {
      "name": "adobeRecommended",
      "in": "query",
      "required": false,
      "description": "Indicates templates featured by Adobe.\n",
      "type": "boolean"
    },
    "SizeParam": {
      "name": "size",
      "in": "query",
      "required": false,
      "description": "A number of items to return.",
      "type": "integer",
      "enum": [
        10,
        25,
        50
      ],
      "default": 10
    },
    "CursorParam": {
      "name": "cursor",
      "in": "query",
      "required": false,
      "description": "We'll use a forward-only cursor-based pagination (also known as an infinite scrolling).\nA value is a BASE64 encoded encrypted string.\n",
      "type": "string"
    },
    "OrderByParam": {
      "name": "orderBy",
      "in": "query",
      "required": false,
      "description": "A query parameter used for sorting.\nThe value of the orderBy parameter contains a comma-separated list of expressions used to sort the items.\nThe expression MAY include the suffix \"asc\" for ascending or \"desc\" for descending, separated from the property name by a space.\nIf \"asc\" or \"desc\" is not specified, the service MUST order by the specified property in ascending order.\nSub-sorts can be specified by a comma-separated list of property names with an OPTIONAL direction qualifier.\n",
      "type": "string"
    }
  },
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "deleteTemplateAuth": {
      "type": "oauth2",
      "authorizationUrl": "",
      "flow": "implicit",
      "scopes": {
        "template_registry.write": "Access to modify the template registry"
      },
      "x-client-ids": [
        "adp-template-registry-service",
        "adp-template-registry-service-stage",
        "UDPWeb1",
        "UDPService1",
        "stage_adobe_io",
        "aio-cli-console-auth",
        "aio-cli-console-auth-stage"
      ]
    },
    "createAndUpdateTemplateAuth": {
      "type": "oauth2",
      "authorizationUrl": "",
      "flow": "implicit",
      "scopes": {
        "template_registry.write": "Access to modify the template registry"
      },
      "x-client-ids": [
        "adp-template-registry-service",
        "UDPService1"
      ]
    }
  },
  "paths": {
    "/templates": {
      "post": {
        "summary": "Add a template to Template Registry for a further verification.",
        "operationId": "template-registry-api/templates-post.http",
        "tags": [
          "templates"
        ],
        "security": [
          {
            "createAndUpdateTemplateAuth": [
              "template_registry.write"
            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "template",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name",
                "links"
              ],
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the package implementing the template on npmjs.com",
                  "example": "@adobe/app-builder-template",
                  "x-nullable": false
                },
                "description": {
                  "type": "string",
                  "description": "A description of the template",
                  "example": "This is a template for Adobe App Builder"
                },
                "createdBy": {
                  "type": "string",
                  "description": "The name of the user who created the template",
                  "example": "Lazarus"
                },
                "latestVersion": {
                  "type": "string",
                  "description": "The version of the template in the semver format",
                  "example": "1.0.0"
                },
                "author": {
                  "type": "string",
                  "description": "The name of the template's author",
                  "example": "Adobe Inc."
                },
                "status": {
                  "type": "string",
                  "description": "A status of a package in Template Registry.\n\"Error\" indicates that an application error occurred.\n",
                  "enum": [
                    "InVerification",
                    "Approved",
                    "Rejected",
                    "Error"
                  ],
                  "example": "Approved"
                },
                "adobeRecommended": {
                  "type": "boolean",
                  "description": "Whether the template is recommended by Adobe",
                  "example": true
                },
                "codeSamples": {
                  "$ref": "#/definitions/CodeSamples"
                },
                "links": {
                  "type": "object",
                  "description": "A link to the Github repository containing the package's source code",
                  "additionalProperties": false,
                  "minProperties": 1,
                  "x-nullable": false,
                  "properties": {
                    "github": {
                      "$ref": "#/definitions/GithubUrl"
                    },
                    "consoleProject": {
                      "$ref": "#/definitions/DeveloperConsoleUrl"
                    }
                  }
                }
              },
              "example": {
                "name": "@adobe/app-builder-template",
                "links": {
                  "github": "https://github.com/adobe/app-builder-template"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Information about a newly added template.",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "405": {
            "$ref": "#/responses/HttpMethodNotAllowed"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/responses/ServiceUnavailable"
          },
          "504": {
            "$ref": "#/responses/GatewayTimeout"
          }
        },
        "x-openwhisk": {
          "action": "templates-post.http",
          "package": "template-registry-api",
          "url": "not-used"
        }
      },
      "get": {
        "summary": "Return a list of templates matching a specified criteria.",
        "operationId": "template-registry-api/templates-list.http",
        "tags": [
          "templates"
        ],
        "security": [],
        "parameters": [
          {
            "$ref": "#/parameters/NamesParam"
          },
          {
            "$ref": "#/parameters/CategoriesParam"
          },
          {
            "$ref": "#/parameters/ApisParam"
          },
          {
            "$ref": "#/parameters/ExtensionsParam"
          },
          {
            "$ref": "#/parameters/EventsParam"
          },
          {
            "$ref": "#/parameters/RuntimeParam"
          },
          {
            "$ref": "#/parameters/StatusesParam"
          },
          {
            "$ref": "#/parameters/AdobeRecommendedParam"
          },
          {
            "$ref": "#/parameters/SizeParam"
          },
          {
            "$ref": "#/parameters/CursorParam"
          },
          {
            "$ref": "#/parameters/OrderByParam"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of templates matching a specified criteria.",
            "schema": {
              "type": "object",
              "required": [
                "items",
                "_links"
              ],
              "additionalProperties": false,
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Template"
                  }
                },
                "_links": {
                  "$ref": "#/definitions/Links"
                }
              },
              "example": {
                "items": [
                  {
                    "id": "f62f3381-592a-41a3-b936-ef953abd0155",
                    "author": "Adobe Inc.",
                    "name": "@adobe/app-builder-template",
                    "description": "AppBuilder template",
                    "adobeRecommended": true,
                    "latestVersion": "1.0.10",
                    "publishDate": "2022-04-22T04:17:28.643Z",
                    "categories": [
                      "graphql-mesh"
                    ],
                    "apis": [
                      {
                        "code": "Runtime"
                      }
                    ],
                    "keywords": [
                      "aio-app-builder-template",
                      "aio"
                    ],
                    "status": "Approved",
                    "links": {
                      "npm": "https://www.npmjs.com/package/@adobe/app-builder-template",
                      "github": "https://github.com/adobe/app-builder-template"
                    },
                    "_links": {
                      "self": {
                        "href": "https://template-registry-api.tbd/apis/v1/templates/@adobe/app-builder-template"
                      }
                    }
                  },
                  {
                    "id": "3e3aee0b-539e-43b1-b47c-0a69eaf39d6c",
                    "name": "@company1/app-builder-template",
                    "status": "InVerification",
                    "links": {
                      "npm": "https://www.npmjs.com/package/@company1/app-builder-template",
                      "github": "https://github.com/company1/app-builder-template"
                    },
                    "_links": {
                      "self": {
                        "href": "https://template-registry-api.tbd/apis/v1/templates/@company1/app-builder-template"
                      },
                      "review": {
                        "href": "https://github.com/adobe/aio-template-submission/issues/<number>",
                        "description": "A link to \"Template Review Request\" Github Issue"
                      }
                    }
                  }
                ],
                "_links": {
                  "self": {
                    "href": "https://template-registry-api.tbd/apis/v1/templates?statuses=Approved,InVerification"
                  },
                  "next": {
                    "href": "https://template-registry-api.tbd/apis/v1/templates?statuses=Approved,InVerification&cursor=MTIzNDU2Nzg5MA=="
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "405": {
            "$ref": "#/responses/HttpMethodNotAllowed"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/responses/ServiceUnavailable"
          },
          "504": {
            "$ref": "#/responses/GatewayTimeout"
          }
        },
        "x-openwhisk": {
          "action": "templates-list.http",
          "package": "template-registry-api",
          "url": "not-used"
        }
      }
    },
    "/templates/{templateName}": {
      "get": {
        "summary": "Get information about a template.",
        "operationId": "template-registry-api/templates-get.http",
        "tags": [
          "templates"
        ],
        "security": [],
        "parameters": [
          {
            "$ref": "#/parameters/TemplateName"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Information about a template.",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "405": {
            "$ref": "#/responses/HttpMethodNotAllowed"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/responses/ServiceUnavailable"
          },
          "504": {
            "$ref": "#/responses/GatewayTimeout"
          }
        },
        "x-openwhisk": {
          "action": "templates-get.http",
          "package": "template-registry-api",
          "url": "not-used"
        }
      },
      "delete": {
        "summary": "Delete a template from Template Registry.",
        "operationId": "template-registry-api/templates-delete.http",
        "tags": [
          "templates"
        ],
        "security": [
          {
            "deleteTemplateAuth": [
              "template_registry.write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/TemplateName"
          }
        ],
        "responses": {
          "200": {
            "description": "A template was deleted from Template Registry."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "405": {
            "$ref": "#/responses/HttpMethodNotAllowed"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/responses/ServiceUnavailable"
          },
          "504": {
            "$ref": "#/responses/GatewayTimeout"
          }
        },
        "x-openwhisk": {
          "action": "templates-delete.http",
          "package": "template-registry-api",
          "url": "not-used"
        }
      }
    },
    "/templates/{templateId}/install": {
      "post": {
        "summary": "Install a template",
        "operationId": "template-registry-api/templates-install.http",
        "tags": [
          "templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/TemplateId"
          },
          {
            "in": "body",
            "name": "requestBody",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplateInstallationRequestBody"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Template installed - Console Project created successfully.",
            "schema": {
              "$ref": "#/definitions/TemplateInstallationResponseBody"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "405": {
            "$ref": "#/responses/HttpMethodNotAllowed"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/responses/ServiceUnavailable"
          },
          "504": {
            "$ref": "#/responses/GatewayTimeout"
          }
        },
        "x-openwhisk": {
          "action": "templates-install.http",
          "package": "template-registry-api",
          "url": "not-used"
        }
      }
    },
    "/templates/{orgName}/{templateName}": {
      "get": {
        "summary": "Get information about a template by organization.",
        "operationId": "template-registry-api/templates-get-org-name.http",
        "tags": [
          "templates"
        ],
        "security": [],
        "parameters": [
          {
            "$ref": "#/parameters/TemplateName"
          },
          {
            "$ref": "#/parameters/OrgName"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Information about a template.",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "405": {
            "$ref": "#/responses/HttpMethodNotAllowed"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/responses/ServiceUnavailable"
          },
          "504": {
            "$ref": "#/responses/GatewayTimeout"
          }
        },
        "x-openwhisk": {
          "action": "templates-get.http",
          "package": "template-registry-api",
          "url": "not-used"
        }
      },
      "delete": {
        "summary": "Delete a template from Template Registry by organization.",
        "operationId": "template-registry-api/templates-delete-org-name.http",
        "tags": [
          "templates"
        ],
        "security": [
          {
            "deleteTemplateAuth": [
              "template_registry.write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/TemplateName"
          },
          {
            "$ref": "#/parameters/OrgName"
          }
        ],
        "responses": {
          "200": {
            "description": "A template was deleted from Template Registry."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "405": {
            "$ref": "#/responses/HttpMethodNotAllowed"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/responses/ServiceUnavailable"
          },
          "504": {
            "$ref": "#/responses/GatewayTimeout"
          }
        },
        "x-openwhisk": {
          "action": "templates-delete.http",
          "package": "template-registry-api",
          "url": "not-used"
        }
      }
    }
  },
  "definitions": {
    "400": {
      "type": "object",
      "required": [
        "errors"
      ],
      "additionalProperties": false,
      "properties": {
        "errors": {
          "type": "array",
          "description": "A list of error objects.",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "Template": {
      "type": "object",
      "required": [
        "id",
        "name",
        "status",
        "links",
        "_links"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique identifier of the template in the UUID format",
          "example": "991f1cf7-8ecc-403c-9f29-1ab8a3beacbf"
        },
        "author": {
          "type": "string",
          "description": "The name of the template's author on npmjs.com",
          "example": "Adobe Inc."
        },
        "name": {
          "type": "string",
          "description": "The name of the template on npmjs.com",
          "example": "@adobe/app-builder-template"
        },
        "createdBy": {
          "type": "string",
          "description": "The name of the user who created the template",
          "example": "Lazarus"
        },
        "description": {
          "type": "string",
          "description": "A description of the template",
          "example": "AppBuilder template"
        },
        "adobeRecommended": {
          "type": "boolean",
          "description": "Whether the template is recommended by Adobe",
          "example": true
        },
        "latestVersion": {
          "type": "string",
          "description": "The version of the template in the semver format",
          "example": "1.0.10"
        },
        "publishDate": {
          "type": "string",
          "description": "The date the template was published in the ISO 8601 format",
          "example": "2022-04-20T19:54:41.495Z"
        },
        "extensions": {
          "type": "array",
          "description": "Extension points that a template implements",
          "minItems": 1,
          "items": {
            "type": "object",
            "required": [
              "extensionPointId"
            ],
            "additionalProperties": true,
            "properties": {
              "extensionPointId": {
                "type": "string",
                "description": "Extension Point Id",
                "example": "dx/excshell/1"
              }
            }
          }
        },
        "categories": {
          "type": "array",
          "description": "A list of categories the template belongs to",
          "minItems": 1,
          "items": {
            "type": "string"
          },
          "example": [
            "graphql-mesh"
          ]
        },
        "apis": {
          "type": "array",
          "description": "A list of Adobe APIs required by the template",
          "minItems": 1,
          "items": {
            "type": "object",
            "required": [
              "code"
            ],
            "additionalProperties": true,
            "properties": {
              "code": {
                "type": "string",
                "description": "The sdk code of the service",
                "example": "AdobeAnalyticsSDK"
              },
              "licenseConfigs": {
                "type": "array",
                "description": "List of available license configs (product profiles) for the API",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        },
        "credentials": {
          "type": "array",
          "description": "A list of credentials required by the template",
          "minItems": 1,
          "items": {
            "type": "object",
            "required": [
              "type",
              "flowType"
            ],
            "additionalProperties": true,
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the credential",
                "example": "OAUTH_SERVER_TO_SERVER"
              },
              "flowType": {
                "type": "string",
                "description": "The flow type of the credential",
                "example": "ENTP"
              }
            }
          }
        },
        "runtime": {
          "type": "boolean",
          "description": "Whether to add Runtime to App Builder application or not.",
          "default": false
        },
        "event": {
          "type": "object",
          "description": "event configuration for the template"
        },
        "keywords": {
          "type": "array",
          "description": "A list of keywords specified in the packages.json file",
          "items": {
            "type": "string"
          },
          "example": [
            "aio-app-builder-template",
            "aio"
          ]
        },
        "status": {
          "type": "string",
          "description": "A status of a package in Template Registry.\n\"Error\" indicates that an application error occurred.\n",
          "enum": [
            "InVerification",
            "Approved",
            "Rejected",
            "Error"
          ],
          "example": "Approved"
        },
        "codeSamples": {
          "$ref": "#/definitions/CodeSamples"
        },
        "links": {
          "type": "object",
          "description": "A list of locations where the package's code can be found",
          "additionalProperties": false,
          "properties": {
            "npm": {
              "type": "string",
              "format": "uri",
              "pattern": "^https://www\\.npmjs\\.com/",
              "description": "A link to the package on npmjs.com",
              "example": "https://www.npmjs.com/package/@adobe/app-builder-template"
            },
            "github": {
              "$ref": "#/definitions/GithubUrl"
            },
            "consoleProject": {
              "$ref": "#/definitions/DeveloperConsoleUrl"
            }
          }
        },
        "orgEntitled": {
          "type": "boolean",
          "description": "Whether the organization is entitled to use the template",
          "example": true
        },
        "userEntitled": {
          "type": "boolean",
          "description": "Whether the user is entitled to use the template",
          "example": true
        },
        "canRequestAccess": {
          "type": "boolean",
          "description": "Whether the user can request access to the template",
          "example": true
        },
        "disEntitledReasons": {
          "type": "array",
          "description": "A list of reasons why the user is not entitled to use the template",
          "items": {
            "type": "string"
          },
          "example": [
            "USER_MISSING_DEV_ROLE",
            "ORG_MISSING_FIS",
            "USER_MISSING_PRIVATE_BETA",
            "USER_MISSING_PUBLIC_BETA"
          ]
        },
        "_links": {
          "$ref": "#/definitions/Links"
        }
      }
    },
    "GithubUrl": {
      "type": "string",
      "format": "uri",
      "x-nullable": false,
      "pattern": "^https://github\\.com/",
      "description": "A link to the Github repository containing the package's source code",
      "example": "https://github.com/adobe/app-builder-template"
    },
    "DeveloperConsoleUrl": {
      "type": "string",
      "format": "uri",
      "x-nullable": false,
      "pattern": "^https://developer-stage\\.adobe\\.com/console/projects",
      "description": "A link to the console project",
      "example": "https://developer-stage.adobe.com/console/projects/<project-id>"
    },
    "CodeSamples": {
      "type": "array",
      "description": "A list of code samples for the template",
      "items": {
        "type": "object",
        "required": [
          "language",
          "link"
        ],
        "additionalProperties": true,
        "properties": {
          "language": {
            "type": "string",
            "description": "The language of the code sample",
            "example": "javascript"
          },
          "link": {
            "type": "string",
            "description": "The code sample",
            "example": "https://developer-stage.adobe.com/codeSample.zip"
          }
        }
      }
    },
    "Links": {
      "type": "object",
      "description": "A key-value object representing related resources.\nA key name represents a related resource and the value of the key specifies an object containing the resource's URL in the \"href\" key.\n",
      "additionalProperties": false,
      "properties": {
        "self": {
          "$ref": "#/definitions/Link"
        },
        "next": {
          "$ref": "#/definitions/Link"
        },
        "review": {
          "$ref": "#/definitions/Link"
        }
      }
    },
    "Link": {
      "description": "An object describing a related resource.",
      "type": "object",
      "required": [
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "href": {
          "type": "string",
          "format": "uri",
          "description": "An URL to a resource.",
          "example": "https://github.com/adobe/aio-template-submission/issues/<number>"
        },
        "description": {
          "type": "string",
          "description": "(Optional) A brief description of a resource.",
          "example": "A link to \"Template Review Request\" Github Issue"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "additionalProperties": false,
      "properties": {
        "code": {
          "type": "string",
          "description": "A string code representing this error.",
          "example": "missing_required_parameter"
        },
        "message": {
          "type": "string",
          "description": "A description of this error.",
          "example": "The \"XXX\" parameter is not set"
        }
      }
    },
    "TemplateInstallationRequestBody": {
      "type": "object",
      "required": [
        "orgId",
        "projectName",
        "metadata"
      ],
      "properties": {
        "orgId": {
          "type": "string",
          "description": "AMS org id"
        },
        "projectName": {
          "type": "string",
          "description": "Project name"
        },
        "description": {
          "type": "string",
          "description": "Project description"
        },
        "metadata": {
          "type": "object",
          "description": "Key value pairs of credential metadata like allowed domains, redirect uris etc",
          "additionalProperties": {}
        }
      }
    },
    "TemplateInstallationResponseBody": {
      "type": "object",
      "properties": {
        "project": {
          "type": "object",
          "required": ["id", "name", "org"],
          "description": "Root element",
          "properties": {
            "id": {
              "type": "string",
              "description": "Project id"
            },
            "name": {
              "type": "string",
              "description": "Project name"
            },
            "title": {
              "type": "string",
              "description": "Project title"
            },
            "description": {
              "type": "string",
              "description": "Project description"
            },
            "org": {
              "type": "object",
              "description": "Organization info",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Organization id"
                },
                "name": {
                  "type": "string",
                  "description": "Organization name"
                },
                "ims_org_id": {
                  "type": "string",
                  "description": "Ims organization id"
                },
                "workspace": {
                  "type": "object",
                  "description": "Workspace info",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Workspace id"
                    },
                    "name": {
                      "type": "string",
                      "description": "Workspace name"
                    },
                    "title": {
                      "type": "string",
                      "description": "Workspace title"
                    },
                    "description": {
                      "type": "string",
                      "description": "Workspace description"
                    },
                    "details": {
                      "type": "object",
                      "description": "Workspace details",
                      "properties": {
                        "credentials": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Credential id"
                              },
                              "name": {
                                "type": "string",
                                "description": "Credential name"
                              },
                              "apiKey": {
                                "type": "string",
                                "description": "Api key / client Id"
                              },
                              "integration_type": {
                                "type": "string",
                                "description": "Credential type, possible values (service, oauthweb, oauthandroid, oauthios)"
                              },
                              "jwt": {
                                "type": "object",
                                "description": "jwt credential details",
                                "properties": {
                                  "client_id": {
                                    "type": "string",
                                    "description": "Client id"
                                  },
                                  "client_secret": {
                                    "type": "string",
                                    "description": "Client secret"
                                  },
                                  "technical_account_email": {
                                    "type": "string",
                                    "description": "Technical account email"
                                  },
                                  "technical_account_id": {
                                    "type": "string",
                                    "description": "Technical account id"
                                  },
                                  "meta_scopes": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "description": "Credential meta scope"
                                    }
                                  }
                                }
                              },
                              "oauth_server_to_server": {
                                "type": "object",
                                "description": "OAuth server to server credential details",
                                "properties": {
                                  "client_id": {
                                    "type": "string",
                                    "description": "Client id"
                                  },
                                  "client_secrets": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "description": "client secrets"
                                    }
                                  },
                                  "technical_account_email": {
                                    "type": "string",
                                    "description": "Technical account email"
                                  },
                                  "technical_account_id": {
                                    "type": "string",
                                    "description": "Technical account id"
                                  },
                                  "scopes": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "description": "Credential scopes"
                                    }
                                  }
                                }
                              },
                              "oauth2": {
                                "type": "object",
                                "description": "oauth2 credential details",
                                "properties": {
                                  "client_id": {
                                    "type": "string",
                                    "description": "Client id"
                                  },
                                  "client_secret": {
                                    "type": "string",
                                    "description": "Client secret"
                                  },
                                  "redirect_uri": {
                                    "type": "array",
                                    "description": "Redirect urls list",
                                    "items": {
                                      "type": "string",
                                      "description": "Redirect url"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "services": {
                          "type": "array",
                          "description": "Workspace services",
                          "items": {
                            "type": "object",
                            "description": "Service details",
                            "properties": {
                              "code": {
                                "type": "string",
                                "description": "Service code"
                              },
                              "name": {
                                "type": "string",
                                "description": "Service name"
                              }
                            }
                          }
                        },
                        "runtime": {
                          "type": "object",
                          "description": "Workspace runtime",
                          "properties": {
                            "namespaces": {
                              "type": "array",
                              "description": "Runtime namespaces",
                              "items": {
                                "type": "object",
                                "description": "Runtime details",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Namespace name"
                                  },
                                  "auth": {
                                    "type": "string",
                                    "description": "Namespace auth token"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "mesh": {
                          "type": "object",
                          "description": "Mesh configuration"
                        },
                        "events": {
                          "type": "object",
                          "description": "Events details",
                          "properties": {
                            "registrations": {
                              "type": "array",
                              "description": "Event registrations",
                              "items": {
                                "type": "object",
                                "description": "Event registrations details",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "id"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "name"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "registration description"
                                  },
                                  "enabled": {
                                    "type": "string",
                                    "description": "enabled"
                                  },
                                  "client_id": {
                                    "type": "string",
                                    "description": "client id"
                                  },
                                  "registration_id": {
                                    "type": "string",
                                    "description": "registration id"
                                  },
                                  "webhook_status": {
                                    "type": "string",
                                    "description": "webhook status"
                                  },
                                  "created_date": {
                                    "type": "string",
                                    "description": "create date"
                                  },
                                  "updated_date": {
                                    "type": "string",
                                    "description": "update date"
                                  },
                                  "webhook_url": {
                                    "type": "string",
                                    "description": "webhook url"
                                  },
                                  "delivery_type": {
                                    "type": "string",
                                    "description": "delivery type"
                                  },
                                  "events_url": {
                                    "type": "string",
                                    "description": "events url"
                                  },
                                  "trace_url": {
                                    "type": "string",
                                    "description": "trace url"
                                  },
                                  "events_of_interest": {
                                    "type": "array",
                                    "description": "events of interested",
                                    "items": {
                                      "type": "object",
                                      "description": "events of interested details",
                                      "properties": {
                                        "event_code": {
                                          "type": "string",
                                          "description": "event code"
                                        },
                                        "provider_id": {
                                          "type": "string",
                                          "description": "provider id"
                                        },
                                        "event_label": {
                                          "type": "string",
                                          "description": "event label"
                                        },
                                        "event_description": {
                                          "type": "string",
                                          "description": "event description"
                                        },
                                        "provider_label": {
                                          "type": "string",
                                          "description": "provider label"
                                        },
                                        "event_delivery_format": {
                                          "type": "string",
                                          "description": "event delivery format"
                                        },
                                        "provider_metadata": {
                                          "type": "string",
                                          "description": "provider metadata"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}